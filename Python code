{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 381
        },
        "id": "9GG8-VFe4-Ld",
        "outputId": "9734550b-b9cb-4296-c337-07656b8d1c5f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Efficiency results for minimization saved to city_minimisation_efficiency_results_named.xlsx\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Grays  Greenwich  Walthamstow  Silvertown   Ipswich  Colchester  \\\n",
              "0  3.456440   2.146127     6.783528    4.193326  7.107872    5.437110   \n",
              "1  3.850490   1.693697     5.297426    3.235129  7.539179    5.790940   \n",
              "2  2.717077   1.497944     2.730720    2.342850  5.032597    5.057746   \n",
              "3  2.910996   1.172669     2.001009    1.752581  5.571094    5.251105   \n",
              "4       inf   0.410557          inf    0.580913  0.254545    0.282258   \n",
              "5       inf   0.265010          inf    0.352941  0.312195    0.349568   \n",
              "6       inf   0.283401          inf         inf  2.333333    9.333333   \n",
              "7       inf   0.207287          inf         inf  2.865672   11.377778   \n",
              "8  1.513297   1.147202     2.197403    1.388515  3.687709    1.957012   \n",
              "9  1.803986   1.096750     1.960242    1.243101  4.521625    2.203118   \n",
              "\n",
              "    Swansea  Portsmouth  Gt Yarmouth  \n",
              "0  2.903937    3.237716    18.330827  \n",
              "1  3.040462    3.285749    22.454129  \n",
              "2  3.221004    1.761555    11.678205  \n",
              "3  3.425744    1.804514    13.452686  \n",
              "4  0.095759    0.070352     0.700000  \n",
              "5  0.097351    0.071917     0.861257  \n",
              "6  0.153089    0.086741     0.437500  \n",
              "7  0.177795    0.089972     0.538286  \n",
              "8  2.419056    1.667761     5.097297  \n",
              "9  2.714629    1.906049     6.264938  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d624047e-5d1b-4b06-a073-b602c75d7d00\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Grays</th>\n",
              "      <th>Greenwich</th>\n",
              "      <th>Walthamstow</th>\n",
              "      <th>Silvertown</th>\n",
              "      <th>Ipswich</th>\n",
              "      <th>Colchester</th>\n",
              "      <th>Swansea</th>\n",
              "      <th>Portsmouth</th>\n",
              "      <th>Gt Yarmouth</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>3.456440</td>\n",
              "      <td>2.146127</td>\n",
              "      <td>6.783528</td>\n",
              "      <td>4.193326</td>\n",
              "      <td>7.107872</td>\n",
              "      <td>5.437110</td>\n",
              "      <td>2.903937</td>\n",
              "      <td>3.237716</td>\n",
              "      <td>18.330827</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>3.850490</td>\n",
              "      <td>1.693697</td>\n",
              "      <td>5.297426</td>\n",
              "      <td>3.235129</td>\n",
              "      <td>7.539179</td>\n",
              "      <td>5.790940</td>\n",
              "      <td>3.040462</td>\n",
              "      <td>3.285749</td>\n",
              "      <td>22.454129</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2.717077</td>\n",
              "      <td>1.497944</td>\n",
              "      <td>2.730720</td>\n",
              "      <td>2.342850</td>\n",
              "      <td>5.032597</td>\n",
              "      <td>5.057746</td>\n",
              "      <td>3.221004</td>\n",
              "      <td>1.761555</td>\n",
              "      <td>11.678205</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2.910996</td>\n",
              "      <td>1.172669</td>\n",
              "      <td>2.001009</td>\n",
              "      <td>1.752581</td>\n",
              "      <td>5.571094</td>\n",
              "      <td>5.251105</td>\n",
              "      <td>3.425744</td>\n",
              "      <td>1.804514</td>\n",
              "      <td>13.452686</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>inf</td>\n",
              "      <td>0.410557</td>\n",
              "      <td>inf</td>\n",
              "      <td>0.580913</td>\n",
              "      <td>0.254545</td>\n",
              "      <td>0.282258</td>\n",
              "      <td>0.095759</td>\n",
              "      <td>0.070352</td>\n",
              "      <td>0.700000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>inf</td>\n",
              "      <td>0.265010</td>\n",
              "      <td>inf</td>\n",
              "      <td>0.352941</td>\n",
              "      <td>0.312195</td>\n",
              "      <td>0.349568</td>\n",
              "      <td>0.097351</td>\n",
              "      <td>0.071917</td>\n",
              "      <td>0.861257</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>inf</td>\n",
              "      <td>0.283401</td>\n",
              "      <td>inf</td>\n",
              "      <td>inf</td>\n",
              "      <td>2.333333</td>\n",
              "      <td>9.333333</td>\n",
              "      <td>0.153089</td>\n",
              "      <td>0.086741</td>\n",
              "      <td>0.437500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>inf</td>\n",
              "      <td>0.207287</td>\n",
              "      <td>inf</td>\n",
              "      <td>inf</td>\n",
              "      <td>2.865672</td>\n",
              "      <td>11.377778</td>\n",
              "      <td>0.177795</td>\n",
              "      <td>0.089972</td>\n",
              "      <td>0.538286</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>1.513297</td>\n",
              "      <td>1.147202</td>\n",
              "      <td>2.197403</td>\n",
              "      <td>1.388515</td>\n",
              "      <td>3.687709</td>\n",
              "      <td>1.957012</td>\n",
              "      <td>2.419056</td>\n",
              "      <td>1.667761</td>\n",
              "      <td>5.097297</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>1.803986</td>\n",
              "      <td>1.096750</td>\n",
              "      <td>1.960242</td>\n",
              "      <td>1.243101</td>\n",
              "      <td>4.521625</td>\n",
              "      <td>2.203118</td>\n",
              "      <td>2.714629</td>\n",
              "      <td>1.906049</td>\n",
              "      <td>6.264938</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d624047e-5d1b-4b06-a073-b602c75d7d00')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d624047e-5d1b-4b06-a073-b602c75d7d00 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d624047e-5d1b-4b06-a073-b602c75d7d00');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-e8aeb940-6297-44bf-ab5a-27a049c3664c\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e8aeb940-6297-44bf-ab5a-27a049c3664c')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-e8aeb940-6297-44bf-ab5a-27a049c3664c button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_5c598fc1-f00e-4342-ad54-d9507bf56133\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('efficiency_results')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_5c598fc1-f00e-4342-ad54-d9507bf56133 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('efficiency_results');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "efficiency_results",
              "repr_error": "Out of range float values are not JSON compliant: inf"
            }
          },
          "metadata": {},
          "execution_count": 1
        }
      ],
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Load the Excel file\n",
        "file_path = 'Newspapers.xlsx'\n",
        "\n",
        "# Read and clean the data\n",
        "df = pd.read_excel(file_path)\n",
        "df.columns = df.iloc[1]  # Set the second row as headers\n",
        "df = df[2:]  # Remove the first two rows which are not actual data\n",
        "df.reset_index(drop=True, inplace=True)\n",
        "\n",
        "# Extract relevant columns for cities and their data\n",
        "columns_of_interest = df.columns[4:14]  # Adjusting for city-related columns\n",
        "cities_data = df.iloc[:10, 4:14]  # First 10 rows for simplicity\n",
        "cities_data.columns = ['DNDS', 'Grays', 'Greenwich', 'Walthamstow', 'Silvertown',\n",
        "                       'Ipswich', 'Colchester', 'Swansea', 'Portsmouth', 'Gt Yarmouth']\n",
        "\n",
        "# Calculate efficiency for each city (adjusted for minimization)\n",
        "efficiency = cities_data.copy()\n",
        "for city in cities_data.columns[1:]:  # Skip 'DNDS' as it is the input column\n",
        "    efficiency[city] = (\n",
        "        pd.to_numeric(cities_data['DNDS'], errors='coerce') /\n",
        "        pd.to_numeric(cities_data[city], errors='coerce')\n",
        "    )\n",
        "\n",
        "# Extract only the city efficiency results (retain city names as columns)\n",
        "efficiency_results = efficiency[cities_data.columns[1:]]  # Exclude DNDS\n",
        "\n",
        "# Save the results to a new Excel file (if needed)\n",
        "output_file_path = 'city_minimisation_efficiency_results_named.xlsx'\n",
        "efficiency_results.to_excel(output_file_path, index=False)\n",
        "print(f\"Efficiency results for minimization saved to {output_file_path}\")\n",
        "\n",
        "# Optional: Display the dataframe\n",
        "efficiency_results\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import cvxpy as cp\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "# Inputs and outputs for the first 10 cities\n",
        "X = np.array([12190, 81687, 9109, 49917, 140, 768, 6601, 36173, 140, 768])  # Example data\n",
        "Y = np.array([3526.75, 21214.7, 3352.5, 17147.74, 0, 0, 4362, 20051.71, 0, 0])  # Example data\n",
        "\n",
        "# Updated city names based on the given list\n",
        "city_names = [\n",
        "    'Grays', 'Greenwich', 'Walthamstow', 'Silvertown',\n",
        "    'Ipswich', 'Colchester', 'Swansea', 'Portsmouth',\n",
        "    'Gt Yarmouth', 'Norwich'\n",
        "]\n",
        "\n",
        "# Number of depots\n",
        "n_depots = len(X)\n",
        "\n",
        "# Results storage\n",
        "lambda_values = []\n",
        "theta_values = []\n",
        "\n",
        "# Solve the maximization problem for each depot\n",
        "for r in range(n_depots):\n",
        "    # Variables\n",
        "    lambda_vars = cp.Variable(n_depots, nonneg=True)  # Lambda_i for each depot\n",
        "    theta = cp.Variable(nonneg=True)  # Efficiency for depot r\n",
        "\n",
        "    # Constraints\n",
        "    constraints = []\n",
        "\n",
        "    # Input constraint: sum(lambda_i * X_i) <= X_r\n",
        "    constraints.append(cp.sum(cp.multiply(lambda_vars, X)) <= X[r])\n",
        "\n",
        "    # Output constraint: sum(lambda_i * Y_i) >= theta * Y_r\n",
        "    constraints.append(cp.sum(cp.multiply(lambda_vars, Y)) >= theta * Y[r])\n",
        "\n",
        "    # Objective: Maximize theta\n",
        "    objective = cp.Maximize(theta)\n",
        "\n",
        "    # Solve the problem\n",
        "    problem = cp.Problem(objective, constraints)\n",
        "    problem.solve()\n",
        "\n",
        "    # Store results\n",
        "    if problem.status in [\"optimal\", \"optimal_inaccurate\"]:\n",
        "        lambda_values.append(lambda_vars.value)  # Lambda values\n",
        "        theta_values.append(theta.value)        # Efficiency\n",
        "    else:\n",
        "        lambda_values.append(None)\n",
        "        theta_values.append(None)\n",
        "\n",
        "# Combine results into a DataFrame\n",
        "efficiency_results = pd.DataFrame({\n",
        "    \"City\": city_names,\n",
        "    \"Efficiency (Theta)\": theta_values,\n",
        "    \"Lambda Values\": lambda_values\n",
        "})\n",
        "\n",
        "# Save results to an Excel file\n",
        "output_file_path = 'maximization_efficiency_results_with_provided_cities.xlsx'\n",
        "efficiency_results.to_excel(output_file_path, index=False)\n",
        "print(f\"Maximization efficiency results saved to {output_file_path}\")\n",
        "\n",
        "# Display the results\n",
        "efficiency_results\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 381
        },
        "id": "KcRAGgUS-kUg",
        "outputId": "30b4fd8c-18a4-4058-cff4-6e59866ea53c"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Maximization efficiency results saved to maximization_efficiency_results_with_provided_cities.xlsx\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          City  Efficiency (Theta)  \\\n",
              "0        Grays            2.284047   \n",
              "1    Greenwich            2.544439   \n",
              "2  Walthamstow            1.795469   \n",
              "3   Silvertown            1.923612   \n",
              "4      Ipswich                 NaN   \n",
              "5   Colchester                 NaN   \n",
              "6      Swansea            1.000000   \n",
              "7   Portsmouth            1.192090   \n",
              "8  Gt Yarmouth                 NaN   \n",
              "9      Norwich                 NaN   \n",
              "\n",
              "                                       Lambda Values  \n",
              "0  [2.8636231370130954e-10, 3.3603655270247514e-1...  \n",
              "1  [1.0250012612121913e-08, 1.4318032636372705e-0...  \n",
              "2  [1.0377195900308094e-10, 1.1225008319300168e-1...  \n",
              "3  [5.6861555670143595e-09, 7.901264136283771e-10...  \n",
              "4                                               None  \n",
              "5                                               None  \n",
              "6  [4.034489797589784e-11, 2.8911207424500123e-12...  \n",
              "7  [3.998431637435169e-09, 5.598276034946189e-10,...  \n",
              "8                                               None  \n",
              "9                                               None  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-47f7a4bb-1074-4153-a474-967a17ba2400\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>City</th>\n",
              "      <th>Efficiency (Theta)</th>\n",
              "      <th>Lambda Values</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Grays</td>\n",
              "      <td>2.284047</td>\n",
              "      <td>[2.8636231370130954e-10, 3.3603655270247514e-1...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Greenwich</td>\n",
              "      <td>2.544439</td>\n",
              "      <td>[1.0250012612121913e-08, 1.4318032636372705e-0...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Walthamstow</td>\n",
              "      <td>1.795469</td>\n",
              "      <td>[1.0377195900308094e-10, 1.1225008319300168e-1...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Silvertown</td>\n",
              "      <td>1.923612</td>\n",
              "      <td>[5.6861555670143595e-09, 7.901264136283771e-10...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Ipswich</td>\n",
              "      <td>NaN</td>\n",
              "      <td>None</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Colchester</td>\n",
              "      <td>NaN</td>\n",
              "      <td>None</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Swansea</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>[4.034489797589784e-11, 2.8911207424500123e-12...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Portsmouth</td>\n",
              "      <td>1.192090</td>\n",
              "      <td>[3.998431637435169e-09, 5.598276034946189e-10,...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Gt Yarmouth</td>\n",
              "      <td>NaN</td>\n",
              "      <td>None</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Norwich</td>\n",
              "      <td>NaN</td>\n",
              "      <td>None</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-47f7a4bb-1074-4153-a474-967a17ba2400')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-47f7a4bb-1074-4153-a474-967a17ba2400 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-47f7a4bb-1074-4153-a474-967a17ba2400');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-06c71bb1-3719-4005-a120-215edda4065c\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-06c71bb1-3719-4005-a120-215edda4065c')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-06c71bb1-3719-4005-a120-215edda4065c button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_7216f593-59e9-4863-9890-a17c06ccfd7e\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('efficiency_results')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_7216f593-59e9-4863-9890-a17c06ccfd7e button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('efficiency_results');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "efficiency_results",
              "summary": "{\n  \"name\": \"efficiency_results\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"City\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"Gt Yarmouth\",\n          \"Greenwich\",\n          \"Colchester\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Efficiency (Theta)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.6021192730816963,\n        \"min\": 0.9999999968326644,\n        \"max\": 2.5444386004597237,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          2.284046560130154,\n          2.5444386004597237,\n          1.1920899797366644\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Lambda Values\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import cvxpy as cp\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "# Inputs and outputs for the first 10 cities\n",
        "X = np.array([12190, 81687, 9109, 49917, 140, 768, 6601, 36173, 140, 768])\n",
        "Y = np.array([3526.75, 21214.7, 3352.5, 17147.74, 0, 0, 4362, 20051.71, 0, 0])\n",
        "\n",
        "# City names\n",
        "city_names = [\n",
        "    'Grays', 'Greenwich', 'Walthamstow', 'Silvertown',\n",
        "    'Ipswich', 'Colchester', 'Swansea', 'Portsmouth',\n",
        "    'Gt Yarmouth', 'Norwich'\n",
        "]\n",
        "\n",
        "# Number of depots\n",
        "n_depots = len(X)\n",
        "\n",
        "# Results storage\n",
        "lambda_values = []\n",
        "theta_values = []\n",
        "\n",
        "# Solve the Model 3 problem for each depot\n",
        "for r in range(n_depots):\n",
        "    # Variables\n",
        "    lambda_vars = cp.Variable(n_depots, nonneg=True)  # Lambda_i for each depot\n",
        "    theta = cp.Variable(nonneg=True)  # Efficiency for depot r\n",
        "\n",
        "    # Constraints\n",
        "    constraints = []\n",
        "\n",
        "    # Input constraint: sum(lambda_i * X_i) <= theta * X_r\n",
        "    constraints.append(cp.sum(cp.multiply(lambda_vars, X)) <= theta * X[r])\n",
        "\n",
        "    # Output constraint: sum(lambda_i * Y_i) >= Y_r\n",
        "    constraints.append(cp.sum(cp.multiply(lambda_vars, Y)) >= Y[r])\n",
        "\n",
        "    # Lambda normalization: sum(lambda_i) = 1\n",
        "    constraints.append(cp.sum(lambda_vars) == 1)\n",
        "\n",
        "    # Objective: Minimize theta\n",
        "    objective = cp.Minimize(theta)\n",
        "\n",
        "    # Solve the problem\n",
        "    problem = cp.Problem(objective, constraints)\n",
        "    problem.solve()\n",
        "\n",
        "    # Store results\n",
        "    if problem.status in [\"optimal\", \"optimal_inaccurate\"]:\n",
        "        lambda_values.append(lambda_vars.value)  # Lambda values\n",
        "        theta_values.append(theta.value)        # Efficiency\n",
        "    else:\n",
        "        lambda_values.append(None)\n",
        "        theta_values.append(None)\n",
        "\n",
        "# Combine results into a DataFrame\n",
        "efficiency_results = pd.DataFrame({\n",
        "    \"City\": city_names,\n",
        "    \"Efficiency (Theta)\": theta_values,\n",
        "    \"Lambda Values\": lambda_values\n",
        "})\n",
        "\n",
        "# Save results to an Excel file\n",
        "output_file_path = 'model3_efficiency_results.xlsx'\n",
        "efficiency_results.to_excel(output_file_path, index=False)\n",
        "print(f\"Model 3 efficiency results saved to {output_file_path}\")\n",
        "\n",
        "# Display the results\n",
        "efficiency_results\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 381
        },
        "id": "PdxZ0JeSyxfv",
        "outputId": "b536bb7d-0f7d-4264-8814-92c84b509f02"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model 3 efficiency results saved to model3_efficiency_results.xlsx\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          City  Efficiency (Theta)  \\\n",
              "0        Grays            0.440019   \n",
              "1    Greenwich            1.000000   \n",
              "2  Walthamstow            0.560515   \n",
              "3   Silvertown            0.615013   \n",
              "4      Ipswich            1.000000   \n",
              "5   Colchester            0.182292   \n",
              "6      Swansea            1.000000   \n",
              "7   Portsmouth            1.000000   \n",
              "8  Gt Yarmouth            1.000000   \n",
              "9      Norwich            0.182292   \n",
              "\n",
              "                                       Lambda Values  \n",
              "0  [1.0941114847723768e-09, 1.403861573594404e-10...  \n",
              "1  [8.071665623960861e-12, 0.9999999994449007, 6....  \n",
              "2  [7.673879720736162e-10, 9.860244263005299e-11,...  \n",
              "3  [6.770883347655644e-11, 9.448756837078919e-12,...  \n",
              "4  [0.0, 0.0, 0.0, 0.0, 0.49999999998981465, 9.69...  \n",
              "5  [0.0, 0.0, 0.0, 0.0, 0.4999999999994716, 3.031...  \n",
              "6  [2.2164362016363697e-10, 2.0117094884689343e-1...  \n",
              "7  [4.2589667900947255e-11, 3.6786228387781385e-1...  \n",
              "8  [0.0, 0.0, 0.0, 0.0, 0.49999999998981465, 9.69...  \n",
              "9  [0.0, 0.0, 0.0, 0.0, 0.4999999999994716, 3.031...  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3208b6c1-1e46-4776-9976-1be3201eb0f1\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>City</th>\n",
              "      <th>Efficiency (Theta)</th>\n",
              "      <th>Lambda Values</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Grays</td>\n",
              "      <td>0.440019</td>\n",
              "      <td>[1.0941114847723768e-09, 1.403861573594404e-10...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Greenwich</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>[8.071665623960861e-12, 0.9999999994449007, 6....</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Walthamstow</td>\n",
              "      <td>0.560515</td>\n",
              "      <td>[7.673879720736162e-10, 9.860244263005299e-11,...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Silvertown</td>\n",
              "      <td>0.615013</td>\n",
              "      <td>[6.770883347655644e-11, 9.448756837078919e-12,...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Ipswich</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>[0.0, 0.0, 0.0, 0.0, 0.49999999998981465, 9.69...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Colchester</td>\n",
              "      <td>0.182292</td>\n",
              "      <td>[0.0, 0.0, 0.0, 0.0, 0.4999999999994716, 3.031...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Swansea</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>[2.2164362016363697e-10, 2.0117094884689343e-1...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Portsmouth</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>[4.2589667900947255e-11, 3.6786228387781385e-1...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Gt Yarmouth</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>[0.0, 0.0, 0.0, 0.0, 0.49999999998981465, 9.69...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Norwich</td>\n",
              "      <td>0.182292</td>\n",
              "      <td>[0.0, 0.0, 0.0, 0.0, 0.4999999999994716, 3.031...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3208b6c1-1e46-4776-9976-1be3201eb0f1')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3208b6c1-1e46-4776-9976-1be3201eb0f1 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3208b6c1-1e46-4776-9976-1be3201eb0f1');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-578547de-9789-4510-b949-807c68f103b8\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-578547de-9789-4510-b949-807c68f103b8')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-578547de-9789-4510-b949-807c68f103b8 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_613cf89a-f3e6-4670-8403-2732ff02c5f7\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('efficiency_results')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_613cf89a-f3e6-4670-8403-2732ff02c5f7 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('efficiency_results');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "efficiency_results",
              "summary": "{\n  \"name\": \"efficiency_results\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"City\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"Gt Yarmouth\",\n          \"Greenwich\",\n          \"Colchester\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Efficiency (Theta)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.34645405343739516,\n        \"min\": 0.18229166666089652,\n        \"max\": 1.000000002679572,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1.000000000020265,\n          0.18229166666089652,\n          0.4400185959305491\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Lambda Values\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import cvxpy as cp\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "# Inputs and outputs for the first 10 cities\n",
        "X = np.array([12190, 81687, 9109, 49917, 140, 768, 6601, 36173, 140, 768])\n",
        "Y = np.array([3526.75, 21214.7, 3352.5, 17147.74, 0, 0, 4362, 20051.71, 0, 0])\n",
        "\n",
        "# City names\n",
        "city_names = [\n",
        "    'Grays', 'Greenwich', 'Walthamstow', 'Silvertown',\n",
        "    'Ipswich', 'Colchester', 'Swansea', 'Portsmouth',\n",
        "    'Gt Yarmouth', 'Norwich'\n",
        "]\n",
        "\n",
        "# Number of depots\n",
        "n_depots = len(X)\n",
        "\n",
        "# Results storage\n",
        "lambda_values = []\n",
        "theta_values = []\n",
        "\n",
        "# Solve the problem for each depot\n",
        "for r in range(n_depots):\n",
        "    # Variables\n",
        "    lambda_vars = cp.Variable(n_depots, nonneg=True)  # Lambda_i for each depot\n",
        "    theta = cp.Variable(nonneg=True)  # Efficiency for depot r\n",
        "\n",
        "    # Constraints\n",
        "    constraints = []\n",
        "\n",
        "    # Input constraint: sum(lambda_i * X_i) <= theta * X_r\n",
        "    constraints.append(cp.sum(cp.multiply(lambda_vars, X)) <= theta * X[r])\n",
        "\n",
        "    # Output constraint: sum(lambda_i * Y_i) >= Y_r\n",
        "    constraints.append(cp.sum(cp.multiply(lambda_vars, Y)) >= Y[r])\n",
        "\n",
        "    # Objective: Minimize theta (for minimization model)\n",
        "    objective = cp.Minimize(theta)\n",
        "\n",
        "    # Solve the problem\n",
        "    problem = cp.Problem(objective, constraints)\n",
        "    problem.solve()\n",
        "\n",
        "    # Store results\n",
        "    if problem.status in [\"optimal\", \"optimal_inaccurate\"]:\n",
        "        lambda_values.append(lambda_vars.value)  # Lambda values\n",
        "        theta_values.append(theta.value)        # Efficiency\n",
        "    else:\n",
        "        lambda_values.append(None)\n",
        "        theta_values.append(None)\n",
        "\n",
        "# Combine results into a DataFrame\n",
        "efficiency_results = pd.DataFrame({\n",
        "    \"City\": city_names,\n",
        "    \"Efficiency (Theta)\": theta_values,\n",
        "    \"Lambda Values\": lambda_values\n",
        "})\n",
        "\n",
        "# Save results to an Excel file\n",
        "output_file_path = 'fourth_model_efficiency_results.xlsx'\n",
        "efficiency_results.to_excel(output_file_path, index=False)\n",
        "print(f\"Efficiency results (Model 4) saved to {output_file_path}\")\n",
        "\n",
        "# Display the results\n",
        "efficiency_results\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 381
        },
        "id": "dczEmHjq0EQX",
        "outputId": "a74d7aee-1f54-4738-af14-e7ad756da2f8"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Efficiency results (Model 4) saved to fourth_model_efficiency_results.xlsx\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          City  Efficiency (Theta)  \\\n",
              "0        Grays        4.378194e-01   \n",
              "1    Greenwich        3.930140e-01   \n",
              "2  Walthamstow        5.569576e-01   \n",
              "3   Silvertown        5.198553e-01   \n",
              "4      Ipswich        4.142263e-14   \n",
              "5   Colchester        5.519961e-12   \n",
              "6      Swansea        1.000000e+00   \n",
              "7   Portsmouth        8.388628e-01   \n",
              "8  Gt Yarmouth        4.142263e-14   \n",
              "9      Norwich        5.519961e-12   \n",
              "\n",
              "                                       Lambda Values  \n",
              "0  [1.3313888406371655e-10, 1.5274303953684105e-1...  \n",
              "1  [3.937246427907388e-11, 4.236253062173e-12, 7....  \n",
              "2  [1.3755179768936392e-10, 1.6070503483167403e-1...  \n",
              "3  [2.557568287700923e-11, 3.038761178840529e-12,...  \n",
              "4  [0.0, 0.0, 0.0, 0.0, 8.491804899556472e-13, 0....  \n",
              "5  [0.0, 0.0, 0.0, 0.0, 1.9140128481213065e-11, 4...  \n",
              "6  [2.2805224490229392e-12, 2.8142152462958434e-1...  \n",
              "7  [1.8765783596349422e-11, 2.32221451119898e-12,...  \n",
              "8  [0.0, 0.0, 0.0, 0.0, 8.491804899556472e-13, 0....  \n",
              "9  [0.0, 0.0, 0.0, 0.0, 1.9140128481213065e-11, 4...  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-cc502c4b-dd6a-453e-a8ee-7b82924aea63\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>City</th>\n",
              "      <th>Efficiency (Theta)</th>\n",
              "      <th>Lambda Values</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Grays</td>\n",
              "      <td>4.378194e-01</td>\n",
              "      <td>[1.3313888406371655e-10, 1.5274303953684105e-1...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Greenwich</td>\n",
              "      <td>3.930140e-01</td>\n",
              "      <td>[3.937246427907388e-11, 4.236253062173e-12, 7....</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Walthamstow</td>\n",
              "      <td>5.569576e-01</td>\n",
              "      <td>[1.3755179768936392e-10, 1.6070503483167403e-1...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Silvertown</td>\n",
              "      <td>5.198553e-01</td>\n",
              "      <td>[2.557568287700923e-11, 3.038761178840529e-12,...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Ipswich</td>\n",
              "      <td>4.142263e-14</td>\n",
              "      <td>[0.0, 0.0, 0.0, 0.0, 8.491804899556472e-13, 0....</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Colchester</td>\n",
              "      <td>5.519961e-12</td>\n",
              "      <td>[0.0, 0.0, 0.0, 0.0, 1.9140128481213065e-11, 4...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Swansea</td>\n",
              "      <td>1.000000e+00</td>\n",
              "      <td>[2.2805224490229392e-12, 2.8142152462958434e-1...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Portsmouth</td>\n",
              "      <td>8.388628e-01</td>\n",
              "      <td>[1.8765783596349422e-11, 2.32221451119898e-12,...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Gt Yarmouth</td>\n",
              "      <td>4.142263e-14</td>\n",
              "      <td>[0.0, 0.0, 0.0, 0.0, 8.491804899556472e-13, 0....</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Norwich</td>\n",
              "      <td>5.519961e-12</td>\n",
              "      <td>[0.0, 0.0, 0.0, 0.0, 1.9140128481213065e-11, 4...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cc502c4b-dd6a-453e-a8ee-7b82924aea63')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-cc502c4b-dd6a-453e-a8ee-7b82924aea63 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-cc502c4b-dd6a-453e-a8ee-7b82924aea63');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-1bc92b92-ee24-4147-9398-965d9cd3fa1e\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1bc92b92-ee24-4147-9398-965d9cd3fa1e')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-1bc92b92-ee24-4147-9398-965d9cd3fa1e button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_3b89e17f-d8e7-406b-8974-312b8e1f50ed\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('efficiency_results')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_3b89e17f-d8e7-406b-8974-312b8e1f50ed button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('efficiency_results');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "efficiency_results",
              "summary": "{\n  \"name\": \"efficiency_results\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"City\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"Gt Yarmouth\",\n          \"Greenwich\",\n          \"Colchester\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Efficiency (Theta)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.36918151942769645,\n        \"min\": 4.1422634111567867e-14,\n        \"max\": 1.000000000148355,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.3930139987484649,\n          5.519960646750059e-12,\n          0.43781944681741497\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Lambda Values\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    }
  ]
}
